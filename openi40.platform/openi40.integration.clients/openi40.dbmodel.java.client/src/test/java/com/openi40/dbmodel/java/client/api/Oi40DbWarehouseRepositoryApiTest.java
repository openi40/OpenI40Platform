/*
 * Openi40
 * The open source industy 4.0 production scheduler & MES platform
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.openi40.dbmodel.java.client.api;

import com.openi40.dbmodel.java.client.model.AutoCompleteData;
import com.openi40.dbmodel.java.client.model.LookupData;
import com.openi40.dbmodel.java.client.model.OI40DBWarehouse;
import com.openi40.dbmodel.java.client.model.PageInfo;
import com.openi40.dbmodel.java.client.model.PageOI40DBWarehouse;
import com.openi40.dbmodel.java.client.model.QbeSupportOI40DBWarehouse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Oi40DbWarehouseRepositoryApi
 */
@Ignore
public class Oi40DbWarehouseRepositoryApiTest {

    private final Oi40DbWarehouseRepositoryApi api = new Oi40DbWarehouseRepositoryApi();

    
    /**
     * deleteByCode
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteByCodeVoid38Test() {
        String code = null;
        api.deleteByCodeVoid38(code);

        // TODO: test validations
    }
    
    /**
     * deleteByCodes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteByCodesVoid38Test() {
        List<String> codes = null;
        api.deleteByCodesVoid38(codes);

        // TODO: test validations
    }
    
    /**
     * doAutocomplete
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void doAutocompletePageOI40DBWarehouseTest() {
        AutoCompleteData autoCompleteData = null;
        PageOI40DBWarehouse response = api.doAutocompletePageOI40DBWarehouse(autoCompleteData);

        // TODO: test validations
    }
    
    /**
     * doLookup
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void doLookupPageOI40DBWarehouseTest() {
        LookupData lookup = null;
        PageOI40DBWarehouse response = api.doLookupPageOI40DBWarehouse(lookup);

        // TODO: test validations
    }
    
    /**
     * findAll
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findAllListOI40DBWarehouseTest() {
        List<OI40DBWarehouse> response = api.findAllListOI40DBWarehouse();

        // TODO: test validations
    }
    
    /**
     * findAll
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findAllPageOI40DBWarehouseTest() {
        PageInfo p = null;
        PageOI40DBWarehouse response = api.findAllPageOI40DBWarehouse(p);

        // TODO: test validations
    }
    
    /**
     * findByAfterIntegrationTs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findByAfterIntegrationTsListOI40DBWarehouseTest() {
        String ts = null;
        List<OI40DBWarehouse> response = api.findByAfterIntegrationTsListOI40DBWarehouse(ts);

        // TODO: test validations
    }
    
    /**
     * findByAfterModifiedTimestamp
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findByAfterModifiedTimestampListOI40DBWarehouseTest() {
        String ts = null;
        List<OI40DBWarehouse> response = api.findByAfterModifiedTimestampListOI40DBWarehouse(ts);

        // TODO: test validations
    }
    
    /**
     * findByCode
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findByCodeOI40DBWarehouseTest() {
        String code = null;
        OI40DBWarehouse response = api.findByCodeOI40DBWarehouse(code);

        // TODO: test validations
    }
    
    /**
     * findByCodes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findByCodesListOI40DBWarehouseTest() {
        List<String> codes = null;
        List<OI40DBWarehouse> response = api.findByCodesListOI40DBWarehouse(codes);

        // TODO: test validations
    }
    
    /**
     * findByQbe
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findByQbeListOI40DBWarehouseTest() {
        OI40DBWarehouse qbe = null;
        List<OI40DBWarehouse> response = api.findByQbeListOI40DBWarehouse(qbe);

        // TODO: test validations
    }
    
    /**
     * findByQbePaged
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findByQbePagedPageOI40DBWarehouseTest() {
        QbeSupportOI40DBWarehouse qbe = null;
        PageOI40DBWarehouse response = api.findByQbePagedPageOI40DBWarehouse(qbe);

        // TODO: test validations
    }
    
    /**
     * update
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateListOI40DBWarehouseTest() {
        List<OI40DBWarehouse> data = null;
        List<OI40DBWarehouse> response = api.updateListOI40DBWarehouse(data);

        // TODO: test validations
    }
    
    /**
     * updateSingle
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSingleOI40DBWarehouseTest() {
        OI40DBWarehouse data = null;
        OI40DBWarehouse response = api.updateSingleOI40DBWarehouse(data);

        // TODO: test validations
    }
    
}
