/**
 * 
 * This code is part of the OpenI40 open source advanced production scheduler
 * platform suite, have look to its licencing options.
 * Web site: http://openi40.org/  
 * Github: https://github.com/openi40/OpenI40Platform
 * We hope you enjoy implementing new amazing projects with it.
 * @author architectures@openi40.org
 *
 */
/**
 * Openi40
 * The open source industy 4.0 production scheduler & MES platform
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { TimesheetDto } from '../model/timesheetDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ApsCalendarResourceService {

    protected basePath = 'https://localhost:8080/openi40';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * getCalendar
     * 
     * @param dataSetId dataSetId
     * @param dataSourceName dataSourceName
     * @param objectId objectId
     * @param variantId variantId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCalendarTimesheetDto(dataSetId: string, dataSourceName: string, objectId: string, variantId: string, observe?: 'body', reportProgress?: boolean): Observable<TimesheetDto>;
    public getCalendarTimesheetDto(dataSetId: string, dataSourceName: string, objectId: string, variantId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TimesheetDto>>;
    public getCalendarTimesheetDto(dataSetId: string, dataSourceName: string, objectId: string, variantId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TimesheetDto>>;
    public getCalendarTimesheetDto(dataSetId: string, dataSourceName: string, objectId: string, variantId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (dataSetId === null || dataSetId === undefined) {
            throw new Error('Required parameter dataSetId was null or undefined when calling getCalendarTimesheetDto.');
        }

        if (dataSourceName === null || dataSourceName === undefined) {
            throw new Error('Required parameter dataSourceName was null or undefined when calling getCalendarTimesheetDto.');
        }

        if (objectId === null || objectId === undefined) {
            throw new Error('Required parameter objectId was null or undefined when calling getCalendarTimesheetDto.');
        }

        if (variantId === null || variantId === undefined) {
            throw new Error('Required parameter variantId was null or undefined when calling getCalendarTimesheetDto.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TimesheetDto>(`${this.basePath}/schedulerClient/ApsCalendar/calendar/${encodeURIComponent(String(dataSourceName))}/${encodeURIComponent(String(dataSetId))}/${encodeURIComponent(String(variantId))}/${encodeURIComponent(String(objectId))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
